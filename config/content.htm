<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: fqpabi8</p>
<p>個人倉儲: <a href="https://github.com/mdecp2024/hw-41323223">https://github.com/mdecp2024/hw-41323223</a></p>
<p>個人網站: <a class="Link--inTextBlock" href="https://mdecp2024.github.io/hw-41323223/">https://mdecp2024.github.io/hw-41323223/</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w7</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/RP_bLMw55mU?si=oqMXx_O9p1AC_S7J" title="YouTube video player" width="560"></iframe></p>
<h3>w10</h3>
<p>題目一:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/NIRWldSFfz8?si=1f-SEg5nawTEvcTn" title="YouTube video player" width="560"></iframe></p>
<p>題目二:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/2i01hHpVdJ4?si=hlq1-yB2FwziaJzK" title="YouTube video player" width="560"></iframe></p>
<p></p>
<p><span>請問 Python 程式中有關變數的命名, 除了必須以"_", 以及英文大小寫字母開頭之外, 還有甚麼需要特別注意的地方?</span></p>
<p><span>答:不能使用關鍵字或保留字Python 有一組預定義的保留字（關鍵字），如 <code>if</code>、<code>for</code>、<code>while</code>、<code>class</code>、<code>import</code> 等，這些字詞有特殊的語法用途，不能用作變數名稱、區分大小寫、避免以數字開頭、避免使用與內建函數重名的變數名，在命名變數時，除了基本的命名規則外，還應注意保持程式碼的清晰性與可讀性，遵循 Python 社群的命名慣例，避免使用保留字和內建名稱，以確保程式碼更容易理解並避免潛在錯誤。</span></p>
<p></p>
<p>題目三:</p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/VXwLNQrS9u8?si=w_If4ByJg9WY4Udd" title="YouTube video player" width="560"></iframe></p>
<p>心得：<yt-attributed-string class="style-scope ytd-text-inline-expander" user-input=""><span class="yt-core-attributed-string yt-core-attributed-string--white-space-pre-wrap" dir="auto" role="text"><span class="yt-core-attributed-string--link-inherit-color" dir="auto">藉由這五種程式執行方法去執行微積分與物理的計算，我認知到了電腦的運算速度非常快且精準，若我能好好掌握這類技能，在業界一定有幫助</span></span></yt-attributed-string></p>
<div class="style-scope ytd-text-inline-expander" id="snippet"></div>
<div class="style-scope ytd-watch-metadata" slot="extra-content"></div>
<h3>w11_hw</h3>
<p>hw<a href="https://www.youtube.com/watch?v=H47N4wQp4Xg">影片</a></p>
<p>程式一</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import math
 
n = 10  # 圓的寬度和高度
center = (n // 2, n // 2)  # 圓心座標，這裡是 (5, 5)
radius = n // 2  # 半徑為 5
 
for y in range(n):  # 遍歷每一行
    for x in range(n):  # 遍歷每一列
        # 計算當前點 (x, y) 到圓心的距離
        distance = math.sqrt((x - center[0])**2 + (y - center[1])**2)
        # 如果距離圓心的距離接近半徑，就在這個位置印出星號
        if abs(distance - radius) &lt; 0.5:
            print('＊', end='')
        else:
            print('　', end='')
    print()  # 換行</pre>
<p>說明:</p>
<p></p>
<ul>
<li><code>n = 10</code> 代表圓的尺寸為 10x10。</li>
<li><code>center = (n // 2, n // 2)</code> 設置圓心為 (5, 5)，這樣圓形會居中。</li>
<li><code>radius = n // 2</code> 設置半徑為 5。</li>
<li>程式遍歷每個點，計算每個點到圓心的距離，若距離接近半徑，則印出星號（<code>*</code>），否則印出空格（<code> </code>）。</li>
</ul>
<p></p>
<p></p>
<p>程式二</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import math
 
# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width = 400, height = 400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas
 
# 每一格的 pixel 數
gs = 20
 
# gs*tc = canvas width and height
ctx = canvas.getContext("2d")
 
def dRect(lux, luy, w, h, s=1, c='#ff0000'):
    ctx.lineWidth = s
    ctx.strokeStyle = c
    ctx.beginPath();
    ctx.rect(lux, luy, w, h)
    ctx.stroke();
     
def grid(width, height, grid_pix):
    # x 方向共 width 格
    # y 方向共 height 格
    # grid_pix, 每一個的 pixel 點數
    # 利用迴圈與座標增量繪圖
    for i in range(width):
        for j in range(height):
            dRect(i*grid_pix, j*grid_pix, grid_pix, grid_pix, 1, "lightgrey")
 
def fill(x, y, color):
    ctx.fillStyle = color
    ctx.fillRect(x-1, y-1, gs, gs)
 
def draw_circle_in_grid(center_x, center_y, radius, grid_size):
    # 遍歷每一個網格中心，判斷該網格是否位於圓內
    for i in range(10):  # 10 格 x
        for j in range(10):  # 10 格 y
            # 計算每個格子的中心座標
            grid_center_x = (i * grid_size) + grid_size / 2
            grid_center_y = (j * grid_size) + grid_size / 2
 
            # 計算此點是否在圓內
            distance = math.sqrt((grid_center_x - center_x) ** 2 + (grid_center_y - center_y) ** 2)
             
            if distance &lt;= radius:
                # 填滿圓內的格子
                fill(i * grid_size, j * grid_size, "black")
 
# 繪製背景格子
grid(10, 10, gs)
 
# 圓心位置與半徑
center_x = 5 * gs  # 圓心 X 座標
center_y = 5 * gs  # 圓心 Y 座標
radius = 5 * gs  # 半徑
 
# 在網格上繪製圓
draw_circle_in_grid(center_x, center_y, radius, gs)</pre>
<p>說明:</p>
<ul>
<li><strong><code>draw_circle_in_grid</code> 函數</strong>：這個新函數會遍歷每個格子的中心，並計算該格子的中心點是否位於圓內。如果該點距圓心的距離小於或等於半徑，則填充該格子為黑色。</li>
<li><strong>圓心和半徑設置</strong>：圓心設置為 <code>(5 * gs, 5 * gs)</code>，即圓心位於網格的中間位置，半徑為 <code>5 * gs</code>，這樣可以使圓形在 10x10 網格中顯示。</li>
<li><strong>使用 <code>fill</code> 函數</strong>：當某個格子位於圓內時，我們用 <code>fill</code> 函數將該格子填充為黑色。</li>
</ul>
<p>11/27程式</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">n = 11
space = '_'
center = n//2
#print (center)
 
for y in range(n):
    for x in range(n):
        print("(", x, ", ",y, ")",sep="")</pre>
<p>11/27程式二</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width = 400, height = 400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# 每一格的 pixel 數
gs = 20

# gs*tc = canvas width and height

ctx = canvas.getContext("2d")

width = 11
height = 11

"""
ctx.lineWidth  1
ctx.strokeStyle='lightgrey'
ctx.beginPath()
#ctx.rect(i*gs,j*gs,gs,gs)
ctx.rect(0,0,150,100)
ctx.stroke()
"""

for i in range(width):
    for j in range(height):
        #dRect(i*gs, j*gs, gs, gs, 1, "lightgrey")
        ctx.linewidth = 1
        ctx.strokeStyle='lightgrey'
        ctx.beginPath();
        ctx.rect(i*gs,j*gs,gs,gs)
        ctx.stroke();
            </pre>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"></pre>
<h3>w12_hw</h3>
<p>第一題:input()與print()</p>
<p>範例程式:</p>
<p>第一題程式:input():<a href="https://mdecp2024.github.io/hw-41323223/content/Brython.html?src=https://gist.githubusercontent.com/41323223/505948f5d6c81f07c9ca8b4f3fa03a9d/raw/a23d7496799a3e370fdc8be11ff7c2e8e94e1329/hellow.py">你來自哪裡?</a> print():<a href="https://mdecp2024.github.io/hw-41323223/content/Brython.html?src=https://gist.githubusercontent.com/41323223/001302ff4fca8427ee7958cfcdbb192c/raw/c0187507f3eaab3530bd0b7610f73ebd5977d74f/LOL.py">貓咪</a></p>
<p><a href="https://mdecp2024.github.io/hw-41323223/content/Brython.html?src=https://gist.githubusercontent.com/41323223/00edde30f970da6c4fc7343b43b6b32e/raw/e072c1fc39084f4ff9bf2d2d2805f9889dbb3d89/SB.py">第二題程式</a> <a href="https://mdecp2024.github.io/hw-41323223/content/Brython.html?src=https://gist.githubusercontent.com/41323223/9df06e361f978029d28655426f93eaf6/raw/849e7ad921a2af38aa596a3dc49aa0f5f3a19d77/QQ.py">第三題程式</a></p>
<p>第一題:字串 input(),and print()</p>
<p>字符串是由一系列字符組成的，可以使用單引號（'）或雙引號（"）來定義字符串。</p>
<p>第二題:變數和字串連接</p>
<p>在 Python 中，變數（Variables） 是用來儲存資料的名稱，可以存放不同類型的資料，如數字、字串、列表等。而字串串接（String Concatenation） 是將兩個或多個字串合併成一個字串的過程。</p>
<p>第三題:列表和 if ... in .../ else...</p>
<p>在 Python 中，列表（Lists） 是一種可變的資料結構，用來儲存一系列的項目。你可以將不同的數據類型存儲在列表中，包括數字、字符串，甚至其他列表。使用 if... in... 來檢查某個元素是否存在於列表中。</p>
<p>使用 if... in... 可以檢查某個元素是否存在於列表中。如果元素存在，執行 if 區塊；否則，執行 else 區塊。</p>
<p><a href="https://mdecp2024.github.io/hw-41323223/content/Brython.html?src=https://gist.githubusercontent.com/41323223/69d2bc9dd7f53a1e0e37bad96b5ce9d7/raw/ea039dfe4597f7bc9f339abf954741975f711a77/4Q.py">第四題程式   </a><a href="https://mdecp2024.github.io/hw-41323223/content/Brython.html?src=https://gist.githubusercontent.com/41323223/f37e8a5078f7b1ee16c74752c139210f/raw/d28ca9bcaa7e3076f6c72a4ff058f069f92cd4cb/5Q.py">第五題程式</a>   <a href="https://mdecp2024.github.io/hw-41323223/content/Brython.html?src=https://gist.githubusercontent.com/41323223/37db426c5c5aa88f8a981cb486537481/raw/f5397e6d803d3e42e62c6d6dec3e0a98c1d7ae5f/6Q.py">第六題程式</a></p>
<p>第四題:列表方法: .append() and .remove()</p>
<p>列表方法:在 Python 中，列表（list）是一種常見的數據結構，提供了多種方法來操作和處理列表內容。</p>
<p>第五題:列表方法: .index() .pop(), and .insert()</p>
<p>第六題:列表切片 List slicing</p>
<p>列表切片:什麼是列表切片？ 在 Python 中，列表切片是一種強大的操作方式，用於從列表中提取子列表，而不改變原列表。</p>
<p><a href="https://mdecp2024.github.io/hw-41323223/content/Brython.html?src=https://gist.githubusercontent.com/41323223/04f14685026fc811dde436a2e8ba23f4/raw/815f05f366706dc5066ec030ab920495e8bef579/7Q.py">第七題程式 </a> <a href="https://mdecp2024.github.io/hw-41323223/content/Brython.html?src=https://gist.githubusercontent.com/41323223/d97e73f51d8ab245c9b704e15c0d75e3/raw/4668ab8b6ffddd3981acab0a3c6af8ae9b5f7a0d/8Q.py">第八題程式</a>  <a href="https://mdecp2024.github.io/hw-41323223/content/Brython.html?src=https://gist.githubusercontent.com/41323223/6f8ab000fc22b1f2b60b44083847bb48/raw/a1a58d5cc02249776281845e13b012591c11b4bc/9Q.py">第九題程式</a>  <a href="https://mdecp2024.github.io/hw-41323223/content/Brython.html?src=https://gist.githubusercontent.com/41323223/909e20a3648b84dcc98aa0df048d5218/raw/e10bc9a313335b6ee6bb9b89ed1bb525e4276139/10Q.py">第十題程式</a></p>
<p>第七題:Changing, adding, and removing list elements using slicing 使用切片更改、添加和移除列表元素</p>
<p>第八題:for ... in range() :是 Python 中用來執行 迴圈 的一種語法結構，通常用於在一段固定範圍內重複執行某些操作。</p>
<p>第九題:For loop with if... == ... / else:在 Python 中，你可以在 for 迴圈中結合條件判斷 (if...else) 來執行不同的操作。這種結構非常適合用來篩選、分類或執行特定條件下的操作。</p>
<p>第十題:For loop for searching:For 迴圈可用來在列表（或其他可迭代物件）中尋找特定元素</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"></pre><h3>w13_hw</h3>
<p>w13作業:<span>下列圖形中的兩個正方形外圍, 以黑色畫筆畫圓, 並設法在各線條所圍成的封閉區域塗上不同顏色. 操作過程請拍攝影片, 並在頁面中列出作業心得.</span></p>
<p>w13<a href="https://mdecp2024.github.io/hw-41323223/content/Brython.html?src=https://gist.githubusercontent.com/41323223/84d22b45fd188359a2dd220837f8077f/raw/4af2ec13aa43a9d1c19ce508d51bd06dbd55e2d6/kk.py">程式連結</a></p>
<p>心得:我使用AI來協助我完成這星期的作業，<span>這次作業讓我學到了如何使用 canvas 來繪製圖形，並處理不同區域的顏色填充，看了AI給出的程式解釋我也稍微了解這程式的原理</span></p><h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w5</h3>
<p></p>
<p><code></code></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">height = 10

for i in range(height):
    print('  ' * (height - i - 1) + '*' * (2 * i + 1))</pre>
<p><code>          *<br/>         ***<br/>        *****<br/>       *******<br/>      *********<br/>     ***********<br/>    *************<br/>   ***************<br/>  *****************<br/> *******************</code><br/><br/></p>
<h3>w6</h3>
<p><img alt="" height="191" src="/images/螢幕擷取畫面 2024-10-16 120947.png" width="358"/></p>
<p>http://192.168.56.1:23020/</p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>